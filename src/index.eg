
require:
   yargs
   mkdirp
   path
   expand-home-dir
   moment
   lodash as $
   fs
   child_process -> exec
   js-yaml ->
      safe-load, safe-dump
   .qp -> quaint-plugin

provide:
   run
   run-cwd
   quaint-plugin


get-arguments{} =

   argv = chain yargs:
      @usage{"Usage: wf [options]"}

      @alias{.r, .random}
      @describe{.r, "List random things to do."}

      @alias{.p, .projects}
      @describe{.p, "List of projects to do."}

      @alias{.y, .ago}
      @describe{.y, "Open yesterday/n days ago's file."}

      @alias{.t, .future}
      @describe{.t, "Open/generate tomorrow/in n days' file."}

      @alias{.h, .help}
      @describe{.h, "This help."}

      @describe{.dump, "Dump configuration"}
      @describe{.edit, "Edit configuration"}

      @argv


random{choices, n = 0} =
   picks = $.shuffle{a} where a =
      choices each choice when Math.random{} < 1/choice.interval -> choice
   a = match n:
      0 or === true ->
         picks
      else ->
         picks.take{n}
   $.sort-by{a, x -> x.name}


today{} =
   ;; moment{}.subtract{hours = 6}
   moment{}

make-contents{o, config, all-projects, date} =
   projects =
      if o.projects:
         o.projects.split{R" *,"} each name ->
            config.projects[name] or
               throw E.no-such-project{name}
      else:
         random{all-projects}

   var s = meta{date}
   s ++= "\n"
   projects each proj ->
      s ++= tpl{proj}
   s ++= "\n\nprojects ::"
   sorted-projects = $.sort-by{all-projects} with x ->
      x.interval
   sorted-projects each proj ->
      s ++= '\n  * {proj.name}'
   s ++= "\n\n"
   s

initialize-contents{file, o, config, all-projects, config-path, date} =
   if fs.exists-sync{file}:
      pass
   else:
      fs.write-file-sync{file} with
         make-contents{o, config, all-projects, date}
      ;; fs.write-file-sync{config-path, safe-dump{config}}


meta{date} = '''
meta ::
  version = 2
  date = {date.format{"YYYY-MM-DD"}}
'''

tpl{proj} = '''
{proj.name} ---
  # ((0)) {extract-task{proj}}
'''


ex{command} =
   exec{command} with {error, stdout, stderr} ->
      if stdout:
         console.error{"===="}
         console.error{stdout.trim{}}
         console.error{"===="}
      if error:
         print 'An error occurred with command "{command}": {error}'

extract-task{p} =
   p.tasks = $.shuffle{p.tasks}
   task = p.tasks.shift{}
   task or "No task found."


run{} =

   o = get-arguments{}
   root = expand-home-dir{'~/wf'}
   mkdirp.sync{root}
   ;; config-path = path.join{root, 'config.json'}
   ;; config = JSON.parse{fs.read-file-sync{config-path, .utf8}}
   config-path = path.join{root, 'config.yaml'}
   config-text = fs.read-file-sync{config-path, .utf8}
   config = safe-load{config-text}
   all-projects =
      items{config.projects} each {k, v} ->
         v.name = k
         v

   open{date} =
      file = path.join{root, '{date.format{"YYYY-MM-DD"}}.q'}
      initialize-contents{file, o, config, all-projects, config-path, date}
      ex{'emacs {file}'}

   match o:
      match {"_" => {p >> config.projects[p]}} ->
         {=> true? v} ->
            print p
         {=> Number? i} ->
            p.interval = o.i or p.interval
            print p
            fs.write-file-sync{config-path, safe-dump{config}}
         {=> true? r} ->
            print extract-task{p}
            fs.write-file-sync{config-path, safe-dump{config}}
         {t => true? match t} ->
            String? ->
               p.tasks.push{t}
               fs.write-file-sync{config-path, safe-dump{config}}
            true? ->
               p.tasks each task -> print '* {task}'
            else ->
               pass
         else ->
            print "TODO"
            ;; if p.directory:
            ;;    process.chdir{print expand-home-dir{p.directory}}
            ;; [Array! p.commands] each cmd when cmd ->
            ;;    print cmd
            ;;    ex{cmd}

      {dump => true?} ->
         print config-text

      {edit => true?} ->
         ex{'emacs {config-path}'}

      {random => true?} ->
         print [random{all-projects, o.random} each x -> x.name].join{", "}

      {help => true?} ->
         print yargs.help{}

      {=> true? ago} ->
         open with today{}.subtract{days = Number{ago}}

      {=> true? future} ->
         open with today{}.add{days = Number{future}}

      else ->
         open with today{}


run-cwd{project-name} =

   root = expand-home-dir{'~/wf'}
   mkdirp.sync{root}
   config-path = path.join{root, 'config.yaml'}
   config-text = fs.read-file-sync{config-path, .utf8}
   config = safe-load{config-text}

   cwd = process.cwd{}
   p = config.projects[project-name]

   if p.directory:
      process.chdir{expand-home-dir{p.directory}}
   [Array! p.commands] each cmd when cmd ->
      console.error{cmd}
      ex{cmd}
   print expand-home-dir{p.directory} or cwd

